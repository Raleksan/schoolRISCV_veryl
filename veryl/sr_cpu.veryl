/*
 * schoolRISCV - small RISC-V CPU 
 *
 * originally based on Sarah L. Harris MIPS CPU 
 *                   & schoolMIPS project
 * 
 * Copyright(c) 2017-2020 Stanislav Zhelnio 
 *                        Aleksandr Romanov
 *                   2024 Aleksandr Ryabov  
 */

import lib::*;

module sr_cpu 
(
    clk     : input  clock,
    rst     : input  reset,
    regAddr : input  logic<5>,
    regData : input  logic<32>,
    imData  : input  logic<32>,
    imAddr  : output logic<32>,
) {

    // Control wires
    var aluZero     : logic;
    var pcSrc       : logic;
    var regWrite    : logic;
    var aluSrc      : logic;
    var wdSrc       : logic;
    var aluControl  : logic<3>;

    // Instruction decode wires
    var cmdOp       : logic<7>;
    var rd          : logic<5>;
    var cmdF3       : logic<3>;
    var rs1         : logic<5>;
    var rs2         : logic<5>;
    var cmdF7       : logic<7>;
    var immI        : logic<32>;
    var immB        : logic<32>;
    var immU        : logic<32>;

    // Program counter
    var pc          : logic<32>;
    var pcBranch    : logic<32>  = pc + immB;
    var pcPlus4     : logic<32>  = pc + 4;
    var pcNext      : logic<32>  = if pcSrc {pcBranch} else {pcPlus4};

    inst sm_register: r_pc (
        clk : clk   ,
        rst : rst   ,
        d   : pcNext,
        q   : pc    ,
    );
    
    // Program memory access
    assign imAddr = pc >> 2;
    var instr       : logic<32> = imData;

    // Instruction decode
    inst sr_decode: id (
        instr : instr,
        cmdOp : cmdOp,
        rd    : rd   ,
        cmdF3 : cmdF3,
        rs1   : rs1  ,
        rs2   : rs2  ,
        cmdF7 : cmdF7,
        immI  : immI ,
        immB  : immB ,
        immU  : immU ,
    );

    // Register file
    var rd0         : logic<32>;
    var rd1         : logic<32>;
    var rd2         : logic<32>;
    var wd3         : logic<32>;

    inst sm_register_file: rf (
        clk : clk     ,
        a0  : regAddr ,
        a1  : rs1     ,
        a2  : rs2     ,
        a3  : rd      ,
        rd0 : rd0     ,
        rd1 : rd1     ,
        rd2 : rd2     ,
        wd3 : wd3     ,
        we3 : regWrite,
    );

    // Debug register access
    assign regData = if regAddr != 0 {rd0} else {pc};

    // ALU
    var srcB        : logic<32> = if aluSrc {immI} else {rd2};
    var aluResult   : logic<32>;

    inst sr_alu: alu (
        srcA  : rd1       ,
        srcB  : srcB      ,
        oper  : aluControl,
        zero  : aluZero   ,
        result: aluResult ,
    );

    assign wd3 = if wdSrc {immU} else {aluResult};

    // Control
    inst sr_control: sm_control (
        cmdOp      : cmdOp     ,
        cmdF3      : cmdF3     ,
        cmdF7      : cmdF7     ,
        aluZero    : aluZero   ,
        pcSrc      : pcSrc     ,
        regWrite   : regWrite  ,
        aluSrc     : aluSrc    ,
        wdSrc      : wdSrc     ,
        aluControl : aluControl,
    );

}
